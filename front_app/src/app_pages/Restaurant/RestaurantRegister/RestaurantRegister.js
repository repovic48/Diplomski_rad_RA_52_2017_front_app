import React, { useState } from 'react';
import { Container, Form, Button, Alert } from 'react-bootstrap';
import axios from 'axios';

const RestaurantRegister = () => {
  const [formData, setFormData] = useState({
    name: '',
    address: '',
    email: '',
    password: '',
    confirmPassword: '',
    postal_code: ''
  });

  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');

  // Handle form field changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const { name, address, email, password, postal_code } = formData;

    // Basic validation
    if (!name || !address || !email || !password || !postal_code) {
      setError('Sva polja su obavezna!');
      setSuccessMessage('');
      return;
    }

    if (password !== formData.confirmPassword) {
      setError('Lozinke se ne poklapaju!');
      setSuccessMessage('');
      return;
    }

    // Clear any previous error or success messages
    setError('');
    setSuccessMessage('');

    // Prepare the data to be sent
    const dataToSend = {
      id: '',  // ID will be auto-generated by the backend
      name,
      address,
      email,
      password,
      postal_code: parseInt(postal_code),  // Convert postal_code to integer
      verification_code: "0000", // Auto-generated verification code
      account_active: false,  // Default value
      account_suspended: false,  // Default value
      menu: []
    };

    try {
      const response = await axios.post(
        'http://localhost:8080/api/restaurant/register',  // Update the API endpoint as needed
        dataToSend,
        {
          headers: {
            'Content-Type': 'application/json',
          },
          withCredentials: false,
        }
      );

      if (response.status === 200) {
        setSuccessMessage('Registracija je uspešna!');
      }
    } catch (error) {
      setError('Registracija nije uspela. Pokušajte ponovo kasnije.');
    }
  };

  return (
    <Container className="mt-5">
      <h2>Registracija restorana</h2>
      
      {/* Display error message */}
      {error && <Alert variant="danger">{error}</Alert>}
      
      {/* Display success message */}
      {successMessage && <Alert variant="success">{successMessage}</Alert>}

      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3" controlId="formName">
          <Form.Label>Ime restorana</Form.Label>
          <Form.Control
            type="text"
            placeholder="Unesite ime restorana"
            name="name"
            value={formData.name}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formAddress">
          <Form.Label>Adresa</Form.Label>
          <Form.Control
            type="text"
            placeholder="Unesite adresu restorana"
            name="address"
            value={formData.address}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formEmail">
          <Form.Label>Email adresa</Form.Label>
          <Form.Control
            type="email"
            placeholder="Unesite email"
            name="email"
            value={formData.email}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formPostalCode">
          <Form.Label>Poštanski broj</Form.Label>
          <Form.Control
            as="select"
            name="postal_code"
            value={formData.postal_code}
            onChange={handleChange}
          >
            <option value="">Izaberite poštanski broj</option>
            <option value="11000">11000 – Beograd</option>
            <option value="21000">21000 – Novi Sad</option>
            <option value="18000">18000 – Niš</option>
            <option value="34000">34000 – Kragujevac</option>
            <option value="24000">24000 – Subotica</option>
            <option value="23000">23000 – Zrenjanin</option>
            <option value="16000">16000 – Leskovac</option>
            <option value="37000">37000 – Kruševac</option>
            <option value="25200">25200 – Sombor</option>
            <option value="24300">24300 – Senta</option>
            <option value="17500">17500 – Vranje</option>
            <option value="32000">32000 – Čačak</option>
            <option value="31000">31000 – Užice</option>
            <option value="38000">38000 – Priština</option>
            <option value="38227">38227 – Kosovska Mitrovica</option>
          </Form.Control>
        </Form.Group>

        <Form.Group className="mb-3" controlId="formPassword">
          <Form.Label>Lozinka</Form.Label>
          <Form.Control
            type="password"
            placeholder="Unesite lozinku"
            name="password"
            value={formData.password}
            onChange={handleChange}
          />
        </Form.Group>

        <Form.Group className="mb-3" controlId="formConfirmPassword">
          <Form.Label>Potvrdite lozinku</Form.Label>
          <Form.Control
            type="password"
            placeholder="Potvrdite lozinku"
            name="confirmPassword"
            value={formData.confirmPassword}
            onChange={handleChange}
          />
        </Form.Group>

        <Button variant="primary" type="submit" style={{ backgroundColor: '#82b74b' }}>
          Registrujte se
        </Button>
      </Form>
    </Container>
  );
};

export default RestaurantRegister;
